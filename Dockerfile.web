# Multi-stage build for optimized production image
FROM nvidia/cuda:11.8.0-devel-ubuntu22.04 as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc g++ make \
    python3 python3-dev python3-pip python3-venv \
    git wget curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install build tools
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements and install Python dependencies
COPY requirements.txt /tmp/requirements.txt
COPY requirements.dev.txt /tmp/requirements.dev.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Production stage
FROM nvidia/cuda:11.8.0-runtime-ubuntu22.04

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    python3 python3-pip \
    espeak-ng \
    libsndfile1-dev \
    ffmpeg \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create app directory and required subdirectories
WORKDIR /app
RUN mkdir -p /app/models /app/voices /app/outputs /app/uploads /app/web_server

# Copy TTS source code
COPY TTS/ /app/TTS/
COPY setup.py /app/
COPY MANIFEST.in /app/
COPY pyproject.toml /app/

# Install TTS in development mode
RUN pip install -e .

# Copy web application files
COPY web_server/ /app/web_server/
COPY docker-compose.yml /app/

# Create non-root user for security
RUN groupadd -r ttsuser && useradd -r -g ttsuser ttsuser
RUN chown -R ttsuser:ttsuser /app
USER ttsuser

# Expose port 2201
EXPOSE 2201

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:2201/health || exit 1

# Default command
CMD ["python", "/app/web_server/app.py"]